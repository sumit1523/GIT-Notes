>Git Commits
	A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!
		@ git commit
>Git Branches
	Branches in Git are incredibly lightweight as well. They are simply pointers to a specific commit -- nothing more. 
	This is why many Git enthusiasts chant the mantra: branch early, and branch often
	Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have 
	big beefy branches.
		To create a new branch named newImage - @ git branch newImage
		To checkout the branch git - @ checkout newImage; git commit
		
		By the way, here's a shortcut: if you want to create a new branch AND check it out at the same time, 
		you can simply type @ git checkout -b [yourbranchname]/bugFix.
		
>Branches and Merging
	This is the way of combining the work from two different branches together. This will allow us to branch off, 
	develop a new feature, and then combine it back in.
	
	The first method to combine work that we will examine is @ git merge. Merging in Git creates a special commit that has two unique parents. 
	A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, 
	and the set of all their parents."
	To merge the branch bugFix into master: @ git merge bugFix
	Let's merge master into bugFix: @ git checkout bugFix; git merge master
	
>Git Rebase
	The second way of combining work between branches is rebasing. Rebasing essentially takes a set of commits, "copies" them, and plops them 
	down somewhere else.
	While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. 
	The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.
	
	move our work from bugFix directly onto the work from master:@ git rebase master
	we are checked out on the master branch: @ git rebase bugFix
	
	There! Since master was an ancestor of bugFix, git simply moved the master branch reference forward in history.
	
	
>HEAD
	First we have to talk about "HEAD". HEAD is the symbolic name for the currently checked out commit -- it's essentially 
	what commit you're working on top of.
	HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes 
	to the working tree will start by changing HEAD.
	Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is 
	visible through HEAD.
	git checkout C1; git checkout master; git commit; git checkout C2
	
	Detaching HEAD
	Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:

	HEAD -> master -> C1
		@ git checkout C1  
	And now it's
	HEAD -> C1
	
>Relative Refs
	Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree 
	visualization next to your terminal, so you'll have to use git log to see hashes.
	Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced 
	the previous level is fed2da64c0efc5293610bdd892f82a58e8cbc5d8. Doesn't exactly roll off the tongue...
	The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely 
	identifies the commit. So I can type fed2 instead of the long string above.
	
	With relative refs, you can start somewhere memorable (like the branch bugFix or HEAD) and work from there.

	Relative commits are powerful, but we will introduce two simple ones here:

	Moving upwards one commit at a time with ^
	Moving upwards a number of times with ~<num>
	
	Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of 
	the specified commit.

	So saying master^ is equivalent to "the first parent of master".
		@ git checkout master^	
	You can also reference HEAD as a relative ref. Let's use that a couple of times to move upwards in the commit tree
	git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^	
	Easy! We can travel backwards in time with HEAD^
	
	master^^ is the grandparent (second-generation ancestor) of master
	The "~" operator
	Say you want to move a lot of levels up in the commit tree. It might be tedious to type ^ several times, 
	so Git also has the tilde (~) operator.

	The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would 
	like to ascend. Let's see it in action
	specify a number of commits back with ~: @ git checkout HEAD~4
	
>Branch forcing
	You're an expert on relative refs now, so let's actually use them for something.

	One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch 
	to a commit with the -f option. So something like:

	git branch -f master HEAD~3

	moves (by force) the master branch to three parents behind HEAD.
	 @ git branch -f master HEAD~3
	There we go! Relative refs gave us a concise way to refer to C1 and branch forcing (-f) gave us a way to quickly 
	move a branch to that location.
	git branch -f master C6
	git checkout HEAD~1
	git branch -f bugFix HEAD~1
	@ git branch -f master HEAD~3

>Reversing Changes in Git
	There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level 
	component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). 
	Our application will focus on the latter.

	There are two primary ways to undo changes in Git -- one is using git reset and the other is using git revert. 
	We will look at each of these in the next dialog
	
	Git Reset
	git reset reverts changes by moving a branch reference backwards in time to an older commit. 
	In this sense you can think of it as "rewriting history;" git reset will move a branch backwards as 
	if the commit had never been made in the first place.
	@ git reset HEAD~1
	
	Git Revert
	While resetting works great for local branches on your own machine, its method of "rewriting history" doesn't work for 
	remote branches that others are using.

	In order to reverse changes and share those reversed changes with others, we need to use git revert. Let's see it in action
	@ git revert HEAD
	
	
	git reset HEAD~1

$ git checkout pushed

$ git revert HEAD